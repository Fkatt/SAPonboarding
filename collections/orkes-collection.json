{
	"info": {
		"_postman_id": "6cd8ee0d-f233-4391-88bb-3d68e603fa17",
		"name": "Orkes Onboarding Workflow API - Complete",
		"description": "A complete, automated collection to interact with the v3 onboarding workflow. Designed for use with Newman and includes individual approver response handling.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20308975"
	},
	"item": [
		{
			"name": "4. Individual Approver Response Handler",
			"item": [
				{
					"name": "4a. Submit Single Approver Response",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This handles a single approver response",
									"// Required environment variables from Node.js:",
									"// - target_approver: '1', '2', or '3'",
									"// - approver_decision: 'APPROVED' or 'REJECTED'",
									"// - rejection_reason: 'reason text' (if rejected)",
									"",
									"const targetApprover = pm.environment.get('target_approver');",
									"const decision = pm.environment.get('approver_decision');",
									"const rejectionReason = pm.environment.get('rejection_reason');",
									"",
									"// Validate inputs",
									"if (!targetApprover || !['1', '2', '3'].includes(targetApprover)) {",
									"    throw new Error('target_approver must be 1, 2, or 3');",
									"}",
									"",
									"if (!decision || !['APPROVED', 'REJECTED'].includes(decision)) {",
									"    throw new Error('approver_decision must be APPROVED or REJECTED');",
									"}",
									"",
									"// Get the correct task ID based on target approver",
									"let taskId;",
									"switch(targetApprover) {",
									"    case '1':",
									"        taskId = pm.environment.get('approver1_taskId');",
									"        break;",
									"    case '2':",
									"        taskId = pm.environment.get('approver2_taskId');",
									"        break;",
									"    case '3':",
									"        taskId = pm.environment.get('approver3_taskId');",
									"        break;",
									"}",
									"",
									"if (!taskId) {",
									"    throw new Error(`Task ID not found for approver ${targetApprover}. Run step 3 first.`);",
									"}",
									"",
									"// Build output data - must match exactly what workflow expects",
									"let outputData = {};",
									"if (decision === 'APPROVED') {",
									"    outputData = {",
									"        'is_approved': true,",
									"        'approval_status': 'APPROVED'",
									"    };",
									"} else {",
									"    outputData = {",
									"        'is_approved': false,",
									"        'approval_status': 'REJECTED',",
									"        'rejection_reason': rejectionReason || 'No reason provided'",
									"    };",
									"}",
									"",
									"// Set variables for the request",
									"pm.environment.set('current_task_id', taskId);",
									"pm.environment.set('current_output_data', JSON.stringify(outputData));",
									"",
									"console.log(`Processing approver ${targetApprover} decision: ${decision}`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify the response",
									"pm.test('Approver response submitted successfully', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const targetApprover = pm.environment.get('target_approver');",
									"const decision = pm.environment.get('approver_decision');",
									"",
									"console.log(`‚úÖ Approver ${targetApprover} response (${decision}) submitted successfully`);",
									"",
									"// Clean up temporary variables",
									"pm.environment.unset('current_task_id');",
									"pm.environment.unset('current_output_data');",
									"pm.environment.unset('target_approver');",
									"pm.environment.unset('approver_decision');",
									"pm.environment.unset('rejection_reason');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workflowInstanceId\": \"{{workflowId}}\",\n    \"taskId\": \"{{current_task_id}}\",\n    \"status\": \"COMPLETED\",\n    \"outputData\": {{current_output_data}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Submits a single approver's decision to their specific task. Use target_approver (1,2,3), approver_decision (APPROVED/REJECTED), and rejection_reason environment variables."
					},
					"response": []
				},
				{
					"name": "4b. Check Workflow Progress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check workflow status and log progress",
									"const response = pm.response.json();",
									"",
									"if (response.status) {",
									"    console.log(`Workflow Status: ${response.status}`);",
									"}",
									"",
									"// Count completed approver tasks",
									"let completedApprovers = 0;",
									"const tasks = response.tasks || [];",
									"",
									"const approver1Done = tasks.some(t => t.referenceTaskName.startsWith('approver_1_task_ref') && t.taskType === 'USER_TASK' && t.status === 'COMPLETED');",
									"const approver2Done = tasks.some(t => t.referenceTaskName.startsWith('approver_2_task_ref') && t.taskType === 'USER_TASK' && t.status === 'COMPLETED');",
									"const approver3Done = tasks.some(t => t.referenceTaskName.startsWith('approver_3_task_ref') && t.taskType === 'USER_TASK' && t.status === 'COMPLETED');",
									"",
									"if (approver1Done) completedApprovers++;",
									"if (approver2Done) completedApprovers++;",
									"if (approver3Done) completedApprovers++;",
									"",
									"console.log(`Approvers completed: ${completedApprovers}/3`);",
									"console.log(`Approver 1: ${approver1Done ? '‚úÖ' : '‚è≥'}`);",
									"console.log(`Approver 2: ${approver2Done ? '‚úÖ' : '‚è≥'}`);",
									"console.log(`Approver 3: ${approver3Done ? '‚úÖ' : '‚è≥'}`);",
									"",
									"if (completedApprovers === 3) {",
									"    console.log('üéâ All approvers have responded! Workflow should complete soon.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/workflow/{{workflowId}}?includeTasks=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"workflow",
								"{{workflowId}}"
							],
							"query": [
								{
									"key": "includeTasks",
									"value": "true"
								}
							]
						},
						"description": "Checks the current progress of the workflow and shows which approvers have completed their tasks."
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Legacy Approver Actions (Individual)",
			"item": [
				{
					"name": "Approve - Approver 1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workflowInstanceId\": \"{{workflowId}}\",\n    \"taskId\": \"{{approver1_taskId}}\",\n    \"status\": \"COMPLETED\",\n    \"outputData\": {\n        \"approval_status\": \"APPROVED\",\n        \"is_approved\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Completes the task for approver 1 with an APPROVED status."
					},
					"response": []
				},
				{
					"name": "Reject - Approver 1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workflowInstanceId\": \"{{workflowId}}\",\n    \"taskId\": \"{{approver1_taskId}}\",\n    \"status\": \"COMPLETED\",\n    \"outputData\": {\n        \"approval_status\": \"REJECTED\",\n        \"rejection_reason\": \"{{rejection_reason}}\",\n        \"is_approved\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Completes the task for approver 1 with a REJECTED status."
					},
					"response": []
				},
				{
					"name": "Approve - Approver 2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workflowInstanceId\": \"{{workflowId}}\",\n    \"taskId\": \"{{approver2_taskId}}\",\n    \"status\": \"COMPLETED\",\n    \"outputData\": {\n        \"approval_status\": \"APPROVED\",\n        \"is_approved\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Completes the task for approver 2 with an APPROVED status."
					},
					"response": []
				},
				{
					"name": "Reject - Approver 2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workflowInstanceId\": \"{{workflowId}}\",\n    \"taskId\": \"{{approver2_taskId}}\",\n    \"status\": \"COMPLETED\",\n    \"outputData\": {\n        \"approval_status\": \"REJECTED\",\n        \"rejection_reason\": \"{{rejection_reason}}\",\n        \"is_approved\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Completes the task for approver 2 with a REJECTED status."
					},
					"response": []
				},
				{
					"name": "Approve - Approver 3",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workflowInstanceId\": \"{{workflowId}}\",\n    \"taskId\": \"{{approver3_taskId}}\",\n    \"status\": \"COMPLETED\",\n    \"outputData\": {\n        \"approval_status\": \"APPROVED\",\n        \"is_approved\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Completes the task for approver 3 with an APPROVED status."
					},
					"response": []
				},
				{
					"name": "Reject - Approver 3",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workflowInstanceId\": \"{{workflowId}}\",\n    \"taskId\": \"{{approver3_taskId}}\",\n    \"status\": \"COMPLETED\",\n    \"outputData\": {\n        \"approval_status\": \"REJECTED\",\n        \"rejection_reason\": \"{{rejection_reason}}\",\n        \"is_approved\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/tasks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Completes the task for approver 3 with a REJECTED status."
					},
					"response": []
				}
			]
		},
		{
			"name": "1. Get JWT Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This script runs AFTER the request and saves the token.",
							"const response = pm.response.json();",
							"const token = response.token;",
							"if (token) {",
							"    pm.environment.set(\"orkes_jwt\", token);",
							"    console.log(\"Orkes JWT Token has been saved automatically.\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"keyId\": \"{{KEY}}\",\n  \"keySecret\": \"{{SECRET}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/token",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"token"
					]
				},
				"description": "Fetches a temporary JWT token using the permanent API Key and Secret."
			},
			"response": []
		},
		{
			"name": "2. Start Onboarding Workflow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This script runs AFTER the request and saves the workflow ID.",
							"const workflowId = pm.response.text();",
							"if (workflowId) {",
							"    pm.environment.set(\"workflowId\", workflowId);",
							"    console.log(\"Workflow ID saved: \" + workflowId);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"onboarding_approval_workflow_v3\",\n  \"input\": {\n    \"applicant_email\": \"{{contact_email}}\",\n    \"application_data\": {\n      \"business_name\": \"{{business_name}}\",\n      \"business_contact_number\": \"{{business_contact_number}}\",\n      \"address\": \"{{address}}\",\n      \"business_license_id\": \"{{business_license_id}}\",\n      \"compliance_documents\": [\n        \"{{compliance_document_url_1}}\",\n        \"{{compliance_document_url_2}}\"\n      ]\n    },\n    \"approver1_email\": \"{{approver1_email}}\",\n    \"approver2_email\": \"{{approver2_email}}\",\n    \"approver3_email\": \"{{approver3_email}}\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/workflow",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"workflow"
					]
				},
				"description": "Starts the v3 onboarding workflow with detailed vendor data and saves the resulting workflowInstanceId."
			},
			"response": []
		},
		{
			"name": "3. Get Running Task IDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This script finds the 3 parallel approval task IDs and saves them.",
							"const response = pm.response.json();",
							"if (response && response.tasks) {",
							"    // Look for direct USER_TASK references (no loops)",
							"    const approver1_task = response.tasks.find(t => t.referenceTaskName === 'approver_1_task_ref' && t.taskType === 'USER_TASK');",
							"    const approver2_task = response.tasks.find(t => t.referenceTaskName === 'approver_2_task_ref' && t.taskType === 'USER_TASK');",
							"    const approver3_task = response.tasks.find(t => t.referenceTaskName === 'approver_3_task_ref' && t.taskType === 'USER_TASK');",
							"",
							"    if(approver1_task) pm.environment.set(\"approver1_taskId\", approver1_task.taskId);",
							"    if(approver2_task) pm.environment.set(\"approver2_taskId\", approver2_task.taskId);",
							"    if(approver3_task) pm.environment.set(\"approver3_taskId\", approver3_task.taskId);",
							"",
							"    console.log(\"Approver Task IDs saved.\");",
							"    console.log(\"Approver 1 Task ID: \" + (approver1_task ? approver1_task.taskId : 'Not found'));",
							"    console.log(\"Approver 2 Task ID: \" + (approver2_task ? approver2_task.taskId : 'Not found'));",
							"    console.log(\"Approver 3 Task ID: \" + (approver3_task ? approver3_task.taskId : 'Not found'));",
							"    ",
							"    // Debug: Show all task reference names",
							"    console.log(\"All task reference names found:\");",
							"    response.tasks.forEach(task => {",
							"        console.log(`- ${task.referenceTaskName} (${task.taskType}, Status: ${task.status})`);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/workflow/{{workflowId}}?includeTasks=true",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"workflow",
						"{{workflowId}}"
					],
					"query": [
						{
							"key": "includeTasks",
							"value": "true"
						}
					]
				},
				"description": "Fetches the workflow details to find the unique task IDs for the three parallel approvers."
			},
			"response": []
		},
		{
			"name": "6. Get Final Workflow Status",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/workflow/{{workflowId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"workflow",
						"{{workflowId}}"
					]
				},
				"description": "Checks the final status of the workflow after all tasks are complete."
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{orkes_jwt}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-Authorization",
				"type": "string"
			}
		]
	}
}